"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bigIntToStringUtil = exports.stringToBigIntUtil = exports.getContractFactoryUtil = void 0;
const path = __importStar(require("path"));
const plugins_1 = require("hardhat/plugins");
const constants_1 = require("./constants");
const types_1 = require("./types");
const utils_1 = require("./utils");
function findPath(traversable, name) {
    return __awaiter(this, void 0, void 0, function* () {
        let files = yield (0, utils_1.traverseFiles)(traversable);
        files = files.filter(f => f.endsWith(name));
        if (files.length == 0) {
            return null;
        }
        else if (files.length == 1) {
            return files[0];
        }
        else {
            const msg = "More than one file was found because the path provided is ambiguous, please specify a relative path";
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
        }
    });
}
function getContractFactoryUtil(hre, contractPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const artifactsPath = hre.config.paths.starknetArtifacts;
        (0, utils_1.checkArtifactExists)(artifactsPath);
        contractPath = contractPath.replace(/\.[^/.]+$/, "");
        let searchTarget = path.join(`${contractPath}.cairo`, `${path.basename(contractPath)}.json`);
        const metadataPath = yield findPath(artifactsPath, searchTarget);
        if (!metadataPath) {
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, `Could not find metadata for ${contractPath}`);
        }
        searchTarget = path.join(`${contractPath}.cairo`, `${path.basename(contractPath)}${constants_1.ABI_SUFFIX}`);
        const abiPath = yield findPath(artifactsPath, searchTarget);
        if (!abiPath) {
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, `Could not find ABI for ${contractPath}`);
        }
        const testNetworkName = hre.config.mocha.starknetNetwork || constants_1.DEFAULT_STARKNET_NETWORK;
        const testNetwork = hre.config.networks[testNetworkName];
        if (!testNetwork) {
            const msg = `Network ${testNetworkName} is specified under "mocha.starknetNetwork", but not defined in "networks".`;
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
        }
        if (!testNetwork.url) {
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, `Cannot use network ${testNetworkName}. No "url" specified.`);
        }
        return new types_1.StarknetContractFactory({
            starknetWrapper: hre.starknetWrapper,
            metadataPath,
            abiPath,
            gatewayUrl: testNetwork.url,
            feederGatewayUrl: testNetwork.url
        });
    });
}
exports.getContractFactoryUtil = getContractFactoryUtil;
function stringToBigIntUtil(convertableString) {
    if (convertableString.length > constants_1.SHORT_STRING_MAX_CHARACTERS) {
        const msg = `Strings must have a max of ${constants_1.SHORT_STRING_MAX_CHARACTERS} characters.`;
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
    }
    if (!/^[\x00-\x7F]*$/.test(convertableString)) {
        const msg = "Input string contains an invalid ASCII character.";
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
    }
    const charArray = convertableString.split("").map(c => c.toString().charCodeAt(0).toString(16));
    return BigInt("0x" + charArray.join(""));
}
exports.stringToBigIntUtil = stringToBigIntUtil;
function bigIntToStringUtil(convertableBigInt) {
    return Buffer.from(convertableBigInt.toString(16), 'hex').toString();
}
exports.bigIntToStringUtil = bigIntToStringUtil;
//# sourceMappingURL=extend-utils.js.map