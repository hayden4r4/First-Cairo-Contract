"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const config_1 = require("hardhat/config");
const plugins_1 = require("hardhat/plugins");
require("./type-extensions");
const constants_1 = require("./constants");
const utils_1 = require("./utils");
const starknet_wrappers_1 = require("./starknet-wrappers");
const task_actions_1 = require("./task-actions");
const extend_utils_1 = require("./extend-utils");
// add sources path
(0, config_1.extendConfig)((config, userConfig) => {
    let newPath;
    if (userConfig.paths && userConfig.paths.starknetSources) {
        const userPath = userConfig.paths.starknetSources;
        if (path.isAbsolute(userPath)) {
            newPath = userPath;
        }
        else {
            newPath = path.normalize(path.join(config.paths.root, userPath));
        }
        config.paths.starknetSources = userConfig.paths.starknetSources;
    }
    else {
        const defaultPath = path.join(config.paths.root, constants_1.DEFAULT_STARKNET_SOURCES_PATH);
        newPath = defaultPath;
    }
    config.paths.starknetSources = newPath;
});
// add artifacts path
(0, config_1.extendConfig)((config, userConfig) => {
    let newPath;
    if (userConfig.paths && userConfig.paths.starknetArtifacts) {
        const userPath = userConfig.paths.starknetArtifacts;
        if (path.isAbsolute(userPath)) {
            newPath = userPath;
        }
        else {
            newPath = path.normalize(path.join(config.paths.root, userPath));
        }
        config.paths.starknetArtifacts = userConfig.paths.starknetArtifacts;
    }
    else {
        const defaultPath = path.join(config.paths.root, constants_1.DEFAULT_STARKNET_ARTIFACTS_PATH);
        newPath = defaultPath;
    }
    config.paths.starknetArtifacts = newPath;
});
// add user-defined cairo settings
(0, config_1.extendConfig)((config, userConfig) => {
    if (userConfig.cairo) {
        config.cairo = JSON.parse(JSON.stringify(userConfig.cairo));
    }
    if (!config.cairo) {
        config.cairo = {};
    }
});
// add url to alpha network
(0, config_1.extendConfig)((config) => {
    if (!config.networks.alpha) {
        config.networks.alpha = (0, utils_1.getDefaultHttpNetworkConfig)(constants_1.ALPHA_URL);
    }
    if (!config.networks.alphaMainnet) {
        config.networks.alphaMainnet = (0, utils_1.getDefaultHttpNetworkConfig)(constants_1.ALPHA_MAINNET_URL);
    }
});
// add venv wrapper or docker wrapper of starknet
(0, config_1.extendEnvironment)(hre => {
    const venvPath = hre.config.cairo.venv;
    if (venvPath) {
        if (hre.config.cairo.version) {
            const msg = "Error in config file. Only one of (cairo.version, cairo.venv) can be specified.";
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
        }
        hre.starknetWrapper = new starknet_wrappers_1.VenvWrapper(venvPath);
    }
    else {
        const repository = constants_1.DOCKER_REPOSITORY;
        const tag = hre.config.cairo.version || constants_1.DEFAULT_DOCKER_IMAGE_TAG;
        hre.starknetWrapper = new starknet_wrappers_1.DockerWrapper({ repository, tag });
    }
});
(0, config_1.task)("starknet-compile", "Compiles Starknet contracts")
    .addOptionalVariadicPositionalParam("paths", "The paths to be used for deployment.\n" +
    "Each of the provided paths is recursively looked into while searching for compilation artifacts.\n" +
    "If no paths are provided, the default contracts directory is traversed.")
    .addOptionalParam("cairoPath", "Allows specifying the locations of imported files, if necessary.\n" +
    "Separate them with a colon (:), e.g. --cairo-path='path/to/lib1:path/to/lib2'")
    .setAction(task_actions_1.starknetCompileAction);
(0, config_1.task)("starknet-deploy", "Deploys Starknet contracts which have been compiled.")
    .addFlag("wait", "Wait for deployment transaction to be at least ACCEPTED_ON_L2")
    .addOptionalParam("starknetNetwork", "The network version to be used (e.g. alpha)")
    .addOptionalParam("gatewayUrl", `The URL of the gateway to be used (e.g. ${constants_1.ALPHA_URL})`)
    .addOptionalParam("inputs", "Space separated values forming constructor input.\n" +
    "Pass them as a single string; e.g. --inputs \"1 2 3\"\n" +
    "You would typically use this feature when deploying a single contract.\n" +
    "If you're deploying multiple contracts, they'll all use the same input.").addOptionalVariadicPositionalParam("paths", "The paths to be used for deployment.\n" +
    "Each of the provided paths is recursively looked into while searching for compilation artifacts.\n" +
    "If no paths are provided, the default artifacts directory is traversed.").setAction(task_actions_1.starknetDeployAction);
(0, config_1.extendEnvironment)(hre => {
    hre.starknet = {
        getContractFactory: (contractPath) => __awaiter(void 0, void 0, void 0, function* () {
            const contractFactory = yield (0, extend_utils_1.getContractFactoryUtil)(hre, contractPath);
            return contractFactory;
        }),
        stringToBigInt: convertableString => {
            const convertedString = (0, extend_utils_1.stringToBigIntUtil)(convertableString);
            return convertedString;
        },
        bigIntToString: convertableBigInt => {
            const convertedBigInt = (0, extend_utils_1.bigIntToStringUtil)(convertableBigInt);
            return convertedBigInt;
        }
    };
});
(0, config_1.task)("starknet-verify", "Verifies the contract in the Starknet network.")
    .addOptionalParam("starknetNetwork", "The network version to be used (e.g. alpha)")
    .addParam("path", `The path of the cairo contract (e.g. contracts/conract.cairo)`)
    .addParam("address", `The address where the contract is deployed`)
    .setAction(task_actions_1.starknetVoyagerAction);
//# sourceMappingURL=index.js.map