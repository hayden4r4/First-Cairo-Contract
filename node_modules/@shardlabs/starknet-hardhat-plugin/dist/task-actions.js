"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.starknetVoyagerAction = exports.starknetDeployAction = exports.starknetCompileAction = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const axios_1 = __importDefault(require("axios"));
const plugins_1 = require("hardhat/plugins");
const constants_1 = require("./constants");
const types_1 = require("./types");
const utils_1 = require("./utils");
function checkSourceExists(sourcePath) {
    if (!fs.existsSync(sourcePath)) {
        const msg = `Source expected to be at ${sourcePath}, but not found.`;
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
    }
}
function isTestnet(networkName) {
    return networkName === constants_1.ALPHA_TESTNET
        || networkName === constants_1.ALPHA_TESTNET_INTERNALLY;
}
function isMainnet(networkName) {
    return networkName === constants_1.ALPHA_MAINNET
        || networkName === constants_1.ALPHA_MAINNET_INTERNALLY;
}
/**
 * Transfers logs and generates a return status code.
 *
 * @param executed The process result of running the container
 * @returns 0 if succeeded, 1 otherwise
 */
function processExecuted(executed, logStatus) {
    if (executed.stdout.length) {
        console.log((0, utils_1.adaptLog)(executed.stdout.toString()));
    }
    if (executed.stderr.length) {
        // synchronize param names reported by actual CLI with param names used by this plugin
        const err = executed.stderr.toString();
        const replacedErr = (0, utils_1.adaptLog)(err);
        console.error(replacedErr);
    }
    if (logStatus) {
        const finalMsg = executed.statusCode ? "Failed" : "Succeeded";
        console.log(`\t${finalMsg}\n`);
    }
    return executed.statusCode ? 1 : 0;
}
function isStarknetCompilationArtifact(filePath) {
    const content = fs.readFileSync(filePath).toString();
    let parsed = null;
    try {
        parsed = JSON.parse(content);
    }
    catch (err) {
        return false;
    }
    return !!parsed.entry_points_by_type;
}
/**
 * First deletes the file if it already exists. Then creates an empty file at the provided path.
 * Unlinking/deleting is necessary if user switched from docker to venv.
 * @param filePath the file to be recreated
 */
function initializeFile(filePath) {
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
    }
    fs.closeSync(fs.openSync(filePath, "w"));
}
function getFileName(filePath) {
    return path.basename(filePath, path.extname(filePath));
}
/**
 * Extracts gatewayUrl from args or process.env.STARKNET_NETWORK. Sets hre.starknet.network if provided.
 *
 * @param args the object containing CLI args
 * @param hre environment whose networks and starknet.network are accessed
 * @returns the URL of the gateway to be used
 */
function getGatewayUrl(args, hre) {
    let gatewayUrl = args.gatewayUrl;
    let networkName = args.starknetNetwork || process.env.STARKNET_NETWORK;
    if (isMainnet(networkName)) {
        networkName = constants_1.ALPHA_MAINNET_INTERNALLY;
    }
    else if (isTestnet(networkName)) {
        networkName = constants_1.ALPHA_TESTNET_INTERNALLY;
    }
    if (gatewayUrl && !networkName) {
        return gatewayUrl;
    }
    if (gatewayUrl && networkName) {
        const msg = "Only one of starknet-network and gateway-url should be provided.";
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
    }
    if (!networkName) { // we already know no gatewayUrl is provided
        const msg = "No starknet-network or gateway-url provided.";
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
    }
    hre.starknet.network = networkName;
    const httpNetwork = hre.config.networks[networkName];
    if (!httpNetwork) {
        const msg = `Unknown starknet-network provided: ${networkName}`;
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
    }
    return httpNetwork.url;
}
function starknetCompileAction(args, hre) {
    return __awaiter(this, void 0, void 0, function* () {
        const root = hre.config.paths.root;
        const rootRegex = new RegExp("^" + root);
        const defaultSourcesPath = hre.config.paths.starknetSources;
        const sourcesPaths = args.paths || [defaultSourcesPath];
        const artifactsPath = hre.config.paths.starknetArtifacts;
        let statusCode = 0;
        for (let sourcesPath of sourcesPaths) {
            if (!path.isAbsolute(sourcesPath)) {
                sourcesPath = path.normalize(path.join(root, sourcesPath));
            }
            checkSourceExists(sourcesPath);
            const files = yield (0, utils_1.traverseFiles)(sourcesPath, "*.cairo");
            for (const file of files) {
                console.log("Compiling", file);
                const suffix = file.replace(rootRegex, "");
                const fileName = getFileName(suffix);
                const dirPath = path.join(artifactsPath, suffix);
                const outputPath = path.join(dirPath, `${fileName}.json`);
                const abiPath = path.join(dirPath, `${fileName}${constants_1.ABI_SUFFIX}`);
                const cairoPath = (defaultSourcesPath + ":" + root) + (args.cairoPath ? ":" + args.cairoPath : "");
                fs.mkdirSync(dirPath, { recursive: true });
                initializeFile(outputPath);
                initializeFile(abiPath);
                const executed = yield hre.starknetWrapper.compile({
                    file,
                    output: outputPath,
                    abi: abiPath,
                    cairoPath,
                });
                statusCode += processExecuted(executed, true);
            }
        }
        if (statusCode) {
            const msg = `Failed compilation of ${statusCode} contract${statusCode === 1 ? "" : "s"}.`;
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
        }
    });
}
exports.starknetCompileAction = starknetCompileAction;
function starknetDeployAction(args, hre) {
    return __awaiter(this, void 0, void 0, function* () {
        const gatewayUrl = getGatewayUrl(args, hre);
        const defaultArtifactsPath = hre.config.paths.starknetArtifacts;
        const artifactsPaths = args.paths || [defaultArtifactsPath];
        let statusCode = 0;
        const txHashes = [];
        for (let artifactsPath of artifactsPaths) {
            if (!path.isAbsolute(artifactsPath)) {
                artifactsPath = path.normalize(path.join(hre.config.paths.root, artifactsPath));
            }
            (0, utils_1.checkArtifactExists)(artifactsPath);
            const paths = yield (0, utils_1.traverseFiles)(artifactsPath, "*.json");
            const files = paths.filter(isStarknetCompilationArtifact);
            for (const file of files) {
                console.log("Deploying", file);
                const executed = yield hre.starknetWrapper.deploy({
                    contract: file,
                    gatewayUrl,
                    inputs: args.inputs ? args.inputs.split(/\s+/) : undefined,
                });
                if (args.wait) {
                    const execResult = processExecuted(executed, false);
                    if (execResult == 0) {
                        txHashes.push((0, types_1.extractTxHash)(executed.stdout.toString()));
                    }
                    statusCode += execResult;
                }
                else {
                    statusCode += processExecuted(executed, true);
                }
            }
        }
        if (args.wait) { // If the "wait" flag was passed as an argument, check the previously stored transaction hashes for their statuses
            console.log(`Checking deployment transaction${txHashes.length === 1 ? "" : "s"}...`);
            const promises = txHashes.map(hash => new Promise((resolve, reject) => (0, types_1.iterativelyCheckStatus)(hash, hre.starknetWrapper, gatewayUrl, gatewayUrl, status => {
                console.log(`Deployment transaction ${hash} is now ${status}`);
                resolve();
            }, error => {
                console.log(`Deployment transaction ${hash} is REJECTED`);
                reject(error);
            })));
            yield Promise.allSettled(promises);
        }
        if (statusCode) {
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, `Failed deployment of ${statusCode} contracts`);
        }
    });
}
exports.starknetDeployAction = starknetDeployAction;
function starknetVoyagerAction(args, hre) {
    return __awaiter(this, void 0, void 0, function* () {
        let voyagerUrl = constants_1.VOYAGER_GOERLI_CONTRACT_API_URL;
        if (!isTestnet(args.starknetNetwork)) {
            if (isMainnet(args.starknetNetwork)) {
                voyagerUrl = constants_1.VOYAGER_MAINNET_CONTRACT_API_URL;
            }
            else {
                const msg = `Unknown starknet-network provided: ${args.starknetNetwork}`;
                throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
            }
        }
        voyagerUrl += args.address + "/code";
        let isVerified = false;
        try {
            const resp = yield axios_1.default.get(voyagerUrl, {
                headers: {
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                    'Content-Type': 'application/json'
                }
            });
            const data = resp.data;
            if (data.contract != null && data.contract.length > 0) {
                isVerified = true;
            }
        }
        catch (error) {
            const msg = `Something went wrong when trying to verify the code at address ${args.address}`;
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
        }
        if (isVerified) {
            const msg = `Contract at address ${args.address} has already been verified`;
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
        }
        //If contract hasn't been verified yet, do it
        let contractPath = args.path;
        if (!path.isAbsolute(contractPath)) {
            contractPath = path.normalize(path.join(hre.config.paths.root, contractPath));
        }
        if (fs.existsSync(contractPath)) {
            const content = { code: fs.readFileSync(contractPath).toString().split(/\r?\n|\r/) };
            yield axios_1.default.post(voyagerUrl, JSON.stringify(content)).catch(error => {
                switch (error.response.status) {
                    case 400: {
                        const msg = `Contract at address ${args.address} does not match the provided code`;
                        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
                    }
                    case 500: {
                        const msg = `There is no contract deployed at address ${args.address}, or the transaction was not finished`;
                        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
                    }
                    default: {
                        const msg = `Something went wrong when trying to verify the code at address ${args.address}`;
                        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
                    }
                }
            });
            console.log(`Contract has been successfuly verified at address ${args.address}`);
            return;
        }
        else {
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, `File ${contractPath} does not exist`);
        }
    });
}
exports.starknetVoyagerAction = starknetVoyagerAction;
//# sourceMappingURL=task-actions.js.map