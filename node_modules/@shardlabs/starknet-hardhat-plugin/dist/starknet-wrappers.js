"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VenvWrapper = exports.DockerWrapper = exports.StarknetWrapper = void 0;
const hardhat_docker_1 = require("@nomiclabs/hardhat-docker");
const child_process_1 = require("child_process");
const fs = __importStar(require("fs"));
const plugins_1 = require("hardhat/plugins");
const path = __importStar(require("path"));
const constants_1 = require("./constants");
const utils_1 = require("./utils");
class StarknetWrapper {
    prepareCompileOptions(options) {
        return [
            options.file,
            "--abi", options.abi,
            "--output", options.output,
            "--cairo_path", options.cairoPath
        ];
    }
    prepareDeployOptions(options) {
        const prepared = [
            "deploy",
            "--contract", options.contract,
            "--gateway_url", options.gatewayUrl,
        ];
        if (options.inputs && options.inputs.length) {
            prepared.push("--inputs", ...options.inputs);
        }
        if (options.signature && options.signature.length) {
            prepared.push("--signature", ...options.signature);
        }
        return prepared;
    }
    prepareInvokeOrCallOptions(options) {
        const prepared = [
            options.choice,
            "--abi", options.abi,
            "--feeder_gateway_url", options.feederGatewayUrl,
            "--gateway_url", options.gatewayUrl,
            "--function", options.functionName,
            "--address", options.address,
        ];
        if (options.inputs && options.inputs.length) {
            prepared.push("--inputs", ...options.inputs);
        }
        if (options.signature && options.signature.length) {
            prepared.push("--signature", ...options.signature);
        }
        return prepared;
    }
    prepareGetTxStatusOptions(options) {
        return [
            "tx_status",
            "--hash", options.hash,
            "--gateway_url", options.gatewayUrl,
            "--feeder_gateway_url", options.feederGatewayUrl,
        ];
    }
}
exports.StarknetWrapper = StarknetWrapper;
function getFullImageName(image) {
    return `${image.repository}:${image.tag}`;
}
/**
 * Populate `paths` with paths from `colonSeparatedStr`.
 * `paths` maps a path to itself.
 * @param paths
 * @param colonSeparatedStr
 */
function addPaths(paths, colonSeparatedStr) {
    for (let p of colonSeparatedStr.split(":")) {
        if (!path.isAbsolute(p)) {
            throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, `Path is not absolute: ${p}`);
        }
        // strip trailing slash(es)
        p = p.replace(/\/*$/, "");
        // duplicate paths will cause errors
        if (`${p}/` in paths) {
            continue;
        }
        paths[p] = p;
    }
}
class DockerWrapper extends StarknetWrapper {
    constructor(image) {
        super();
        this.image = image;
        console.log(`${constants_1.PLUGIN_NAME} plugin using dockerized environment (${getFullImageName(image)})`);
    }
    getDocker() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.docker) {
                this.docker = yield hardhat_docker_1.HardhatDocker.create();
                if (!(yield this.docker.hasPulledImage(this.image))) {
                    console.log(`Pulling image ${getFullImageName(this.image)}`);
                    yield this.docker.pullImage(this.image);
                }
            }
            return this.docker;
        });
    }
    compile(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binds = {
                [options.file]: options.file,
                [options.abi]: options.abi,
                [options.output]: options.output,
            };
            addPaths(binds, options.cairoPath);
            const dockerOptions = {
                binds,
                networkMode: "host"
            };
            const preparedOptions = this.prepareCompileOptions(options);
            const docker = yield this.getDocker();
            const executed = yield docker.runContainer(this.image, ["starknet-compile", ...preparedOptions], dockerOptions);
            return executed;
        });
    }
    deploy(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binds = {
                [options.contract]: options.contract,
            };
            const dockerOptions = {
                binds,
                networkMode: "host"
            };
            options.gatewayUrl = (0, utils_1.adaptUrl)(options.gatewayUrl);
            const preparedOptions = this.prepareDeployOptions(options);
            const docker = yield this.getDocker();
            const executed = yield docker.runContainer(this.image, ["starknet", ...preparedOptions], dockerOptions);
            return executed;
        });
    }
    invokeOrCall(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binds = {
                [options.abi]: options.abi,
            };
            const dockerOptions = {
                binds,
                networkMode: "host"
            };
            options.gatewayUrl = (0, utils_1.adaptUrl)(options.gatewayUrl);
            options.feederGatewayUrl = (0, utils_1.adaptUrl)(options.feederGatewayUrl);
            const preparedOptions = this.prepareInvokeOrCallOptions(options);
            const docker = yield this.getDocker();
            const executed = yield docker.runContainer(this.image, ["starknet", ...preparedOptions], dockerOptions);
            return executed;
        });
    }
    getTxStatus(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const binds = {};
            const dockerOptions = {
                binds,
                networkMode: "host"
            };
            const preparedOptions = this.prepareGetTxStatusOptions(options);
            const docker = yield this.getDocker();
            const executed = yield docker.runContainer(this.image, ["starknet", ...preparedOptions], dockerOptions);
            return executed;
        });
    }
}
exports.DockerWrapper = DockerWrapper;
function checkCommandPath(commandPath) {
    if (!fs.existsSync(commandPath)) {
        throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, `Command ${commandPath} not found.`);
    }
}
class VenvWrapper extends StarknetWrapper {
    constructor(venvPath) {
        super();
        let venvPrefix = "";
        if (venvPath === "active") {
            console.log(`${constants_1.PLUGIN_NAME} plugin using the active environment.`);
            this.starknetCompilePath = "starknet-compile";
            this.starknetPath = "starknet";
        }
        else {
            console.log(`${constants_1.PLUGIN_NAME} plugin using environment at ${venvPath}`);
            venvPrefix = path.join(venvPath, "bin");
            this.starknetCompilePath = path.join(venvPrefix, "starknet-compile");
            checkCommandPath(this.starknetCompilePath);
            this.starknetPath = path.join(venvPrefix, "starknet");
            checkCommandPath(this.starknetPath);
        }
    }
    execute(commandPath, preparedOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const process = (0, child_process_1.spawnSync)(commandPath, preparedOptions);
            if (!process.stdout) {
                const msg = `${commandPath} not found. Check that your Python virtual environment has 'cairo-lang' installed.`;
                throw new plugins_1.HardhatPluginError(constants_1.PLUGIN_NAME, msg);
            }
            return {
                statusCode: process.status,
                stdout: process.stdout,
                stderr: process.stderr
            };
        });
    }
    compile(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedOptions = this.prepareCompileOptions(options);
            const executed = yield this.execute(this.starknetCompilePath, preparedOptions);
            return executed;
        });
    }
    deploy(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedOptions = this.prepareDeployOptions(options);
            const executed = yield this.execute(this.starknetPath, preparedOptions);
            return executed;
        });
    }
    invokeOrCall(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedOptions = this.prepareInvokeOrCallOptions(options);
            const executed = yield this.execute(this.starknetPath, preparedOptions);
            return executed;
        });
    }
    getTxStatus(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const preparedOptions = this.prepareGetTxStatusOptions(options);
            const executed = yield this.execute(this.starknetPath, preparedOptions);
            return executed;
        });
    }
}
exports.VenvWrapper = VenvWrapper;
//# sourceMappingURL=starknet-wrappers.js.map